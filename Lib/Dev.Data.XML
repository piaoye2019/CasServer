<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dev.Data</name>
    </assembly>
    <members>
        <member name="T:Dev.Data.Configuration.CommonConfig">
            <summary>
                用于配置的类
            </summary>
        </member>
        <member name="M:Dev.Data.Configuration.CommonConfig.Instance">
            <summary>
                创建自身一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dev.Data.Configuration.CommonConfig.ConfigureData``1(System.String,System.Boolean)">
            <summary>
                配置数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionStringName"></param>
            <param name="createDbFileImmediately">是否立即创建不存在的数据库文件 </param>
            <returns></returns>
        </member>
        <member name="M:Dev.Data.Configuration.CommonConfig.ConfigureData(System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
                配置数据,使用程序集加载
            </summary>
            <param name="connectionStringName"></param>
            <param name="mappingAssemblies"></param>
            <param name="recreateDatabaseIfExist"></param>
            <param name="lazyLoadingEnabled"></param>
            <returns></returns>
        </member>
        <member name="M:Dev.Data.Configuration.CommonConfig.ConfigureData(System.String,System.Reflection.Assembly[],System.Boolean,System.Boolean)">
            <summary>
                配置数据,使用程序集进行加载
            </summary>
            <param name="connectionStringName"></param>
            <param name="assemblies"></param>
            <param name="recreateDatabaseIfExist"></param>
            <param name="lazyLoadingEnabled"></param>
            <returns></returns>
        </member>
        <member name="M:Dev.Data.Configuration.CommonConfig.ConfigureDbContextStorage(Dev.Data.IDbContextStorage)">
            <summary>
                存储模式
            </summary>
            <param name="dbContextStorage"></param>
            <returns></returns>
        </member>
        <member name="M:Dev.Data.DbContextBuilder`1.BuildDbContext">
            <summary>
                Creates a new <see cref="T:System.Data.Objects.ObjectContext"/>.
            </summary>
            <param name="lazyLoadingEnabled">
                if set to <c>true</c> [lazy loading enabled].
            </param>
            <param name="recreateDatabaseIfExist">
                if set to <c>true</c> [recreate database if exist].
            </param>
            <returns></returns>
        </member>
        <member name="M:Dev.Data.DbContextBuilder`1.MakeLoadReadyAssemblyName(System.String)">
            <summary>
                Ensures the assembly name is qualified
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Dev.Data.DbContextBuilder`1.AddConfigurations(System.String[])">
            <summary>
                Adds mapping classes contained in provided assemblies and register entities as well
            </summary>
            <param name="mappingAssemblies"></param>
        </member>
        <member name="M:Dev.Data.DbContextBuilder`1.IsMappingClass(System.Type)">
            <summary>
                Determines whether a type is a subclass of entity mapping type
            </summary>
            <param name="mappingType">Type of the mapping.</param>
            <returns>
                <c>true</c> if it is mapping class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Dev.Data.DbContextInitializer">
            <summary>
            </summary>
        </member>
        <member name="M:Dev.Data.DbContextInitializer.InitializeDbContextOnce(System.Action)">
            <summary>
                This is the method which should be given the call to intialize the DbContext; e.g.,
                DbContextInitializer.Instance().InitializeDbContextOnce(() => InitializeDbContext());
                where InitializeDbContext() is a method which calls DbContextManager.Init()
            </summary>
            <param name="initMethod"></param>
        </member>
        <member name="F:Dev.Data.DbContextManager.DefaultConnectionStringName">
            <summary>
                The default connection string name used if only one database is being communicated with.
            </summary>
        </member>
        <member name="F:Dev.Data.DbContextManager._DbContexts">
            <summary>
                Maintains a dictionary of db context builders, one per database.  The key is a
                connection string name used to look up the associated database, and used to decorate respective
                repositories. If only one database is being used, this dictionary contains a single
                factory with a key of <see cref="F:Dev.Data.DbContextManager.DefaultConnectionStringName"/>.
            </summary>
        </member>
        <member name="M:Dev.Data.DbContextManager.CloseAllDbContexts">
            <summary>
                This method is used by application-specific db context storage implementations
                and unit tests. Its job is to walk thru existing cached object context(s) and Close() each one.
            </summary>
        </member>
        <member name="M:Dev.Data.DbContextManager.CurrentFor(System.String)">
            <summary>
                Used to get the current DbContext associated with a key; i.e., the key
                associated with an object context for a specific database.
                If you're only communicating with one database, you should call <see cref="P:Dev.Data.DbContextManager.Current"/> instead,
                although you're certainly welcome to call this if you have the key available.
            </summary>
        </member>
        <member name="M:Dev.Data.DbContextManager.Init``1(System.String,System.Boolean)">
            <summary>
            初始化数据库
            </summary>
            <param name="connectionStringName"></param>
            <param name="createDbFileImmediately">是否立即创建数据库</param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Dev.Data.DbContextManager.InitStorage(Dev.Data.IDbContextStorage)">
            <summary>
                初始化存储
            </summary>
            <param name="storage"></param>
        </member>
        <member name="P:Dev.Data.DbContextManager.Current">
            <summary>
                Used to get the current db context session if you're communicating with a single database.
                When communicating with multiple databases, invoke <see cref="!:CurrentFor()"/> instead.
            </summary>
        </member>
        <member name="P:Dev.Data.DbContextManager._storage">
            <summary>
                An application-specific implementation of IDbContextStorage must be setup either thru
                <see cref="M:Dev.Data.DbContextManager.InitStorage(Dev.Data.IDbContextStorage)"/> or one of the <see cref="M:Dev.Data.DbContextManager.Init(System.String[],System.Boolean,System.Boolean)"/> overloads.
            </summary>
        </member>
        <member name="T:Dev.Data.GenericRepository">
            <summary>
                Generic repository
            </summary>
        </member>
        <member name="M:Dev.Data.GenericRepository.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Dev.Data.GenericRepository`1"/> class.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
        </member>
        <member name="M:Dev.Data.GenericRepository.#ctor(System.Data.Entity.DbContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Dev.Data.GenericRepository`1"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Dev.Data.GenericRepository.UnitOfWork">
            <summary>
            当前的UOW
            </summary>
        </member>
        <member name="P:Dev.Data.GenericRepository.DbContext">
             <summary>
             这个方法用于维护 DB Context的自动选择的一个方法，
            
             </summary>
        </member>
        <member name="M:Dev.Data.GenericRepository`1.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Dev.Data.GenericRepository`1"/> class.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
        </member>
        <member name="M:Dev.Data.GenericRepository`1.#ctor(System.Data.Entity.DbContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Dev.Data.GenericRepository`1"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Dev.Data.IDbContextStorage">
            <summary>
                Stores object context
            </summary>
        </member>
        <member name="M:Dev.Data.IDbContextStorage.GetAllDbContexts">
            <summary>
                Gets all db contexts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dev.Data.IDbContextStorage.GetDbContextForKey(System.String)">
            <summary>
                Gets the db context for key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Dev.Data.IDbContextStorage.SetDbContextForKey(System.String,System.Data.Entity.DbContext)">
            <summary>
                Sets the db context for key.
            </summary>
            <param name="key">The key.</param>
            <param name="objectContext">The object context.</param>
        </member>
        <member name="M:Dev.Data.UnitOfWork.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Dev.Data.UnitOfWork.Dispose(System.Boolean)">
            <summary>
                Disposes off the managed and unmanaged resources used.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Dev.Data.UnitOfWork.ReleaseCurrentTransaction">
            <summary>
                Releases the current transaction
            </summary>
        </member>
    </members>
</doc>
